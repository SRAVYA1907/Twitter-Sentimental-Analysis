# -*- coding: utf-8 -*-
"""sentimental analysis from twitter data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Euu9T11LquPmM8PKetqcm2Ot1vWT1vmS
"""

import csv
import tweepy
import ssl
#Extracting Data From Twitter using Twitter API's
consumer_key = "ewKs6ZB5Y1jlBFN8OUB6X6pYW"
consumer_secret = "eFzmlQdmXMwbjHuSm7yB2B9dbryeMPHz8M78WFRHh4WxDKlo2X"
access_token = "1464972763156779016-kajT5Q0XZZMgyUDiHa6GP3ZQ0msYy7"
access_token_secret ="P9lyqyUfoHGZyquLWnG4IzRwGjPH6GJen1OWf40robMm3"

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api=tweepy.API(auth)

tweets=api.search(q="Keir_starmer",count=1500)

user = api.me()
print (user.name)

for tw in tweets:
  print(tw.text)

tweet=api.search(q="rishi_sunak",count=1500)
for t in tweet:
  print(t.text)

replies=[]
with open('Keir.csv', 'a+') as f:
    csv_writer = csv.DictWriter(f, fieldnames=('user', 'text'))
    csv_writer.writeheader()
    for tweet in replies:
        row = {'user': tweet.user.screen_name, 'text': tweet.text.replace('\n', ' ')}
        csv_writer.writerow(row)

repliess=[]
with open('Rishi.csv', 'a+') as f:
    csv_writer = csv.DictWriter(f, fieldnames=('user', 'text'))
    csv_writer.writeheader()
    for tweet in repliess:
        row = {'user': tweet.user.screen_name, 'text': tweet.text.replace('\n', ' ')}
        csv_writer.writerow(row)

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from textblob import TextBlob
from wordcloud import WordCloud
import plotly.graph_objects as go
import plotly.express as px
#readind DataSets
keir_reviews = pd.read_csv('/content/keir.csv',encoding = 'utf-8')
rishi_reviews = pd.read_csv('/content/rishi.csv', encoding = 'utf-8')

keir_reviews.head()

rishi_reviews.head()

text_blob_object1 = TextBlob(keir_reviews['text'][10])
print(text_blob_object1.sentiment)
text_blob_object2 = TextBlob(rishi_reviews['text'][50])
print(text_blob_object2.sentiment)

def find_pol(review):
    return TextBlob(review).sentiment.polarity

keir_reviews['Sentiment_Polarity'] = keir_reviews['text'].apply(find_pol)
keir_reviews.tail()

def find_pol(review):
    return TextBlob(review).sentiment.polarity

rishi_reviews['Sentiment_Polarity'] = rishi_reviews['text'].apply(find_pol)
rishi_reviews.tail()

keir_reviews['Expression Label'] = np.where(keir_reviews['Sentiment_Polarity']>0,'positive', 'negative')
keir_reviews['Expression Label'][keir_reviews.Sentiment_Polarity ==0] = "Neutral"
keir_reviews.tail()

rishi_reviews['Expression Label'] = np.where(rishi_reviews['Sentiment_Polarity']>0,'positive', 'negative')
rishi_reviews['Expression Label'][rishi_reviews.Sentiment_Polarity ==0] = "Neutral"
rishi_reviews.tail()

new1 = keir_reviews.groupby('Expression Label').count()
x = list(new1['Sentiment_Polarity'])
y = list(new1.index)
tuple_list = list(zip(x,y))

df = pd.DataFrame(tuple_list, columns=['x','y'])

df['color'] = 'blue'
df['color'][1] = 'red'
df['color'][2] = 'green'

import plotly.graph_objects as go
fig = go.Figure(go.Bar(x=df['x'],
                y=df['y'],
                orientation ='h',
                marker={'color': df['color']}))
fig.show()

new2 = rishi_reviews.groupby('Expression Label').count()
x = list(new2['Sentiment_Polarity'])
y = list(new2.index)
tuple_list = list(zip(x,y))

df = pd.DataFrame(tuple_list, columns=['x','y'])

df['color'] = 'blue'
df['color'][1] = 'red'
df['color'][2] = 'green'

import plotly.graph_objects as go
fig = go.Figure(go.Bar(x=df['x'],
                y=df['y'],
                orientation ='h',
                marker={'color': df['color']}))
fig.show()

reviews1 = keir_reviews[keir_reviews['Sentiment_Polarity'] == 0.0000]
reviews1.shape

cond1=keir_reviews['Sentiment_Polarity'].isin(reviews1['Sentiment_Polarity'])
keir_reviews.drop(keir_reviews[cond1].index, inplace = True)
keir_reviews.shape

reviews2 = rishi_reviews[rishi_reviews['Sentiment_Polarity'] == 0.0000]
reviews2.shape

cond2=rishi_reviews['Sentiment_Polarity'].isin(reviews1['Sentiment_Polarity'])
rishi_reviews.drop(rishi_reviews[cond2].index, inplace = True)
rishi_reviews.shape

np.random.seed(5)
remove_n =302
drop_indices = np.random.choice(keir_reviews.index, remove_n, replace=False)
df_subset_keir = keir_reviews.drop(drop_indices)
df_subset_keir.shape

np.random.seed(10)
remove_n =1
drop_indices = np.random.choice( rishi_reviews.index,remove_n, replace=False)
df_subset_rishi = rishi_reviews.drop(drop_indices)
df_subset_rishi.shape

sns.distplot(df_subset_keir['Sentiment_Polarity'])

sns.distplot(df_subset_rishi['Sentiment_Polarity'])

count_1 = df_subset_keir.groupby('Expression Label').count()
print(count_1)

negative_per1 = (count_1['Sentiment_Polarity'][0]/1000)*10
positive_per1 = (count_1['Sentiment_Polarity'][1]/1000)*100

count_2 = df_subset_rishi.groupby('Expression Label').count()
print(count_2)

negative_per2 = (count_2['Sentiment_Polarity'][0]/1000)*100
positive_per2 = (count_2['Sentiment_Polarity'][1]/1000)*100

Politicians = ['KEIR STARMER', 'RISHI SUNAK']
lis_pos = [positive_per1, positive_per2]
lis_neg = [negative_per1, negative_per2]

fig = go.Figure(data=[
    go.Bar(name='Positive', x=Politicians, y=lis_pos),
    go.Bar(name='Negative', x=Politicians, y=lis_neg)
])
fig.update_layout(barmode='group')
fig.show()

most_positive1 = df_subset_keir[df_subset_keir.Sentiment_Polarity == 1].text.head()
pos_txt1 = list(most_positive1)
pos1 = df_subset_keir[df_subset_keir.Sentiment_Polarity == 1].Sentiment_Polarity.head()
pos_pol1 = list(pos1)

fig = go.Figure(data=[go.Table(columnorder = [1,2],
                               columnwidth = [50,400],
                               header=dict(values=['Polarity','Most Positive Replies on KEIR STARMER\'s Handle'],
                               fill_color='paleturquoise',
                               align='left'),
               cells=dict(values=[pos_pol1, pos_txt1],
                               fill_color='lavender',
                               align='left'))])
fig.show()

most_negative1 = df_subset_keir[df_subset_keir.Sentiment_Polarity == -1].text.head()
neg_txt1 = list(most_negative1)
neg1 = df_subset_keir[df_subset_keir.Sentiment_Polarity == -1].Sentiment_Polarity.head()
neg_pol1 = list(neg1)

fig = go.Figure(data=[go.Table(columnorder = [1,2],
                               columnwidth = [50,400],
                               header=dict(values=['Polarity','Most Negative Replies on Trump\'s handle'],
                               fill_color='paleturquoise',
                               align='left'),
                cells=dict(values=[neg_pol1, neg_txt1],
                           fill_color='lavender',
                           align='left'))])

fig.show()

most_positive2 = df_subset_rishi[df_subset_rishi.Sentiment_Polarity == 1].text.tail()
pos_txt2 = list(most_positive2)
pos2 = df_subset_rishi[df_subset_rishi.Sentiment_Polarity == 1].Sentiment_Polarity.tail()
pos_pol2 = list(pos2)

fig = go.Figure(data=[go.Table(columnorder = [1,2],
                               columnwidth = [50,400],
                               header=dict(values=['Polarity','Most Positive Replies on Biden\'s handle'],
                               fill_color='paleturquoise',
                               align='left'),
                cells=dict(values=[pos_pol2, pos_txt2],
                           fill_color='lavender',
                           align='left'))])

fig.show()

most_negative2 = df_subset_rishi[df_subset_rishi.Sentiment_Polarity == -1].text.head()
neg_txt2 = list(most_negative2)
neg2 = df_subset_rishi[df_subset_rishi.Sentiment_Polarity == -1].Sentiment_Polarity.head()
neg_pol2 = list(neg2)

fig = go.Figure(data=[go.Table(columnorder = [1,2],
                               columnwidth = [50,400],
                               header=dict(values=['Polarity','Most Negative Replies on Biden\'s handle'],
                               fill_color='paleturquoise',
                               align='left'),
                cells=dict(values=[neg_pol2, neg_txt2],
                           fill_color='lavender',
                           align='left'))])

fig.show()

text = str(df_subset_keir.text)
wordcloud = WordCloud(max_font_size=100, max_words=500, scale=10, relative_scaling=.6, background_color="black", colormap = "rainbow").generate(text)
plt.figure(figsize=(15,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

text = str(df_subset_rishi.text)

wordcloud = WordCloud(max_font_size=100, max_words=500,scale=10,relative_scaling=.6,background_color="black", colormap = "rainbow").generate(text)

plt.figure(figsize=(15,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

labels =  ['Negative_keir', 'Negative_rishi']
sizes = lis_neg
explode = (0.1, 0.1)

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels = labels, autopct = '%1.1f%%', shadow = True, startangle=90)
ax1.set_title('Negative tweets on both the handles')
plt.show()

labels =  ['Positive_keir', 'Positive_rishi']
sizes = lis_pos
explode = (0.1, 0.1)

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels = labels, autopct = '%1.1f%%', shadow = True, startangle=90)
ax1.set_title('Positive tweets on both the handles')
plt.show()